{"version":3,"sources":["component/Navbar.js","component/TextArea.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","style","color","src","onClick","darkmode","document","body","backgroundColor","showMessage","height","width","border","alt","func","htmlFor","TextArea","useState","text","setText","Color","btnColor","heading","value","onChange","event","target","rows","t1","toUpperCase","toLowerCase","split","reverse","join","tex","getElementById","select","navigator","clipboard","writeText","newtex","length","endsWith","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setmode","setmsg","setdarkmode","mes","setTimeout","dark","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0MAIe,SAASA,EAAOC,GA+B3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMJ,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACI,qBAAIL,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,oBAKJ,oBAAIF,UAAU,gBAEF,SAAfD,EAAME,KACH,sBAAKK,MAAO,CAACC,MAAM,SAAnB,8BAEI,qBAAKC,IAAI,mGAAmGC,QA1BhH,WAChBV,EAAMW,SAAS,UACfC,SAASC,KAAKN,MAAMO,gBAAkB,SACtCd,EAAMe,YAAY,+BAA+B,YAuBqGR,MAAO,CAACS,OAAO,OAAQC,MAAM,OAAQC,OAAO,mBAAoBC,IAAI,SAASlB,UAAU,wBACzN,qBAAKQ,IAAI,wKAAwKC,QAjCxL,WACbV,EAAMW,SAAS,OACfC,SAASC,KAAKN,MAAMO,gBAAkB,MACtCd,EAAMe,YAAY,4BAA4B,YA8B0KR,MAAO,CAACS,OAAO,OAAQC,MAAM,OAAQC,OAAO,mBAAoBC,IAAI,MAAMlB,UAAU,wBACxR,qBAAKQ,IAAI,yFAAyFC,QApDtG,WAChBV,EAAMW,SAAS,UACfC,SAASC,KAAKN,MAAMO,gBAAkB,SACtCd,EAAMe,YAAY,+BAA+B,YAiD2FR,MAAO,CAACS,OAAO,OAAQC,MAAM,OAAQC,OAAO,mBAAoBC,IAAI,SAASlB,UAAU,wBAC/M,qBAAKQ,IAAI,uDAAuDC,QA/CrE,WACfV,EAAMW,SAAS,SACfC,SAASC,KAAKN,MAAMO,gBAAkB,QACtCd,EAAMe,YAAY,8BAA8B,YA4CyDR,MAAO,CAACS,OAAO,OAAQC,MAAM,OAAQC,OAAO,mBAAoBC,IAAI,QAAQlB,UAAU,wBAC3K,qBAAKQ,IAAI,qGAAqGC,QA1CnH,WACfV,EAAMW,SAAS,SACfC,SAASC,KAAKN,MAAMO,gBAAkB,QACtCd,EAAMe,YAAY,8BAA8B,YAuCuGR,MAAO,CAACS,OAAO,OAAQC,MAAM,OAAQC,OAAO,mBAAoBC,IAAI,QAAQlB,UAAU,2BACtN,GAEX,sBAAKA,UAAS,sCAAiCD,EAAME,KAAvC,SAAd,UACI,uBAAOD,UAAU,mBAAmBI,KAAK,WAAWK,QAASV,EAAMoB,KAAMd,GAAG,2BAC5E,uBAAOL,UAAW,mBAAmBoB,QAAQ,yBAAyBd,MAAO,CAACC,MAAqB,UAAbR,EAAME,KAAe,QAAQ,SAAnH,kCC9DT,SAASoB,EAAStB,GAC7B,MAAwBuB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA6CMC,EAAQ,WAaU,MAXD,UAAnB1B,EAAMW,SACM,QACW,UAAnBX,EAAMW,SACM,QACW,WAAnBX,EAAMW,SACO,QACW,QAAnBX,EAAMW,SACM,SACW,WAAnBX,EAAMW,SACK,QAAkB,QAK5CgB,EAAW,WAaO,MAXD,UAAnB3B,EAAMW,SACM,QACW,UAAnBX,EAAMW,SACM,QACW,WAAnBX,EAAMW,SACO,SACW,QAAnBX,EAAMW,SACM,MACW,WAAnBX,EAAMW,SACK,SAAmB,SAKnD,OACI,qCACA,sBAAKJ,MAAO,CAACC,MAAqB,UAAbR,EAAME,KAAe,UAAU,SAApD,UACI,6BAAKF,EAAM4B,UAEX,qBAAK3B,UAAU,OAAf,SACI,0BAAUM,MAAO,CAACO,gBAA+B,UAAbd,EAAME,KAAe,QAA0B,MAAlBF,EAAMW,SAAmB,OAAOe,IAASlB,MAAqB,UAAbR,EAAME,KAAeF,EAAMW,SAASgB,KAAa1B,UAAU,eAAe4B,MAASL,EAAMM,SAjFnM,SAACC,GACjBN,EAAQM,EAAMC,OAAOH,QAgFqNvB,GAAG,8BAA8B2B,KAAK,SAG5Q,wBAAQ5B,KAAK,SAASK,QAhFX,WACf,IAAIwB,EAAKV,EAAKW,cACdV,EAAQS,GACRlC,EAAMe,YAAY,wCAAwC,YA6EXR,MAAO,CAACO,gBAAgBY,IAASlB,MAAMmB,IAAYT,OAAO,aAAD,OAAcS,MAAe1B,UAAU,uBAA3I,kCACA,wBAAQI,KAAK,SAASK,QA3ET,WACjB,IAAIwB,EAAKV,EAAKY,cACdX,EAAQS,GACRlC,EAAMe,YAAY,wCAAwC,YAwETR,MAAO,CAACO,gBAAgBY,IAASlB,MAAMmB,IAAYT,OAAO,aAAD,OAAcS,MAAe1B,UAAU,uBAA7I,kCACA,wBAAQI,KAAK,SAASK,QAtET,WACjB,IAEIwB,EAFcV,EAAKa,MAAM,IACEC,UACTC,KAAK,IAC3Bd,EAAQS,GACRlC,EAAMe,YAAY,wBAAwB,YAiEOR,MAAO,CAACO,gBAAgBY,IAASlB,MAAMmB,IAAYT,OAAO,aAAD,OAAcS,MAAe1B,UAAU,uBAA7I,qCACA,wBAAQI,KAAK,SAASK,QA/DP,WACnB,IAAI8B,EAAM5B,SAAS6B,eAAe,+BAClCD,EAAIE,SACJC,UAAUC,UAAUC,UAAUL,EAAIX,OAClC7B,EAAMe,YAAY,iCAAiC,YA2DAR,MAAO,CAACO,gBAAgBY,IAASlB,MAAMmB,IAAYT,OAAO,aAAD,OAAcS,MAAe1B,UAAU,uBAA/I,uBACA,wBAAQI,KAAK,SAASK,QAzDT,WACjB,IAAIoC,EAAStB,EAAKa,MAAM,QACxBZ,EAAQqB,EAAOP,KAAK,MACpBvC,EAAMe,YAAY,gCAAgC,YAsDDR,MAAO,CAACO,gBAAgBY,IAASlB,MAAMmB,IAAYT,OAAO,aAAD,OAAcS,MAAe1B,UAAU,uBAA7I,2BACA,wBAAQI,KAAK,SAASK,QApDR,WAElBe,EADS,IAETzB,EAAMe,YAAY,uBAAuB,YAiDSR,MAAO,CAACO,gBAAgBY,IAASlB,MAAMmB,IAAYT,OAAO,aAAD,OAAcS,MAAe1B,UAAU,uBAA9I,2BAGJ,sBAAKA,UAAU,iBAAiBM,MAAO,CAACC,MAAqB,UAAbR,EAAME,KAAe,QAAQ,SAA7E,UACI,8CACA,8BAAIsB,EAAKuB,OAAO,EAAEvB,EAAKwB,SAAS,KAAKxB,EAAKa,MAAM,KAAKU,OAAO,EAAEvB,EAAKa,MAAM,KAAKU,OAAO,IAArF,cAAqGvB,EAAKuB,OAA1G,iBACA,8BAAIvB,EAAKuB,OAAO,EAAEvB,EAAKwB,SAAS,KAAgC,MAA1BxB,EAAKa,MAAM,KAAKU,OAAO,GAAgC,KAAvBvB,EAAKa,MAAM,KAAKU,OAAa,IAAnG,sBACA,iDACA,4BAAIvB,EAAKuB,OAAO,EAAEvB,EAAK,8DCpGpB,SAASyB,EAAMjD,GAK1B,OACIA,EAAMkD,OAAS,sBAAKjD,UAAS,sBAAiBD,EAAMkD,MAAM7C,KAA7B,gCAAiE8C,KAAK,QAApF,UACX,iCANW,SAACC,GAChB,IAAMC,EAAQD,EAAKhB,cACnB,OAAOiB,EAAMC,OAAO,GAAGnB,cAAgBkB,EAAME,MAAM,GAItCC,CAAWxD,EAAMkD,MAAM7C,QADrB,IACsCL,EAAMkD,MAAMO,OFkEzE1D,EAAO2D,aAAe,CAACtD,MAAO,cGNfuD,MAxDf,WACE,MAAwBpC,mBAAS,SAAjC,mBAAOrB,EAAP,KAAa0D,EAAb,KACA,EAAqBrC,mBAAS,MAA9B,mBAAOkC,EAAP,KAAWI,EAAX,KACA,EAA+BtC,mBAAS,MAAxC,mBAAOZ,EAAP,KAAgBmD,EAAhB,KAEM/C,EAAc,SAACgD,EAAI1D,GACvBwD,EAAO,CACLJ,IAAKM,EACL1D,KAAKA,IAGP2D,YAAW,WACTH,EAAO,QACN,OAsBL,OACE,qCAEC,cAAC9D,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAOkB,KAtBrB,WACP,UAATlB,GACD0D,EAAQ,QACRE,EAAY,MACZlD,SAASC,KAAKN,MAAMO,gBAAkB,UACtCC,EAAY,yBAAyB,aAGrC6C,EAAQ,SACRE,EAAY,MACZlD,SAASC,KAAKN,MAAMO,gBAAkB,QACtCC,EAAY,0BAA0B,aAWoBJ,SAPzC,SAACsD,GACpBH,EAAYG,IAMwElD,YAAaA,IAChG,cAACkC,EAAD,CAAOC,MAAOO,IACX,qBAAKxD,UAAU,iBAAf,SAMM,cAACqB,EAAD,CAAUP,YAAaA,EAAaa,QAAQ,8BAA8B1B,KAAMA,EAAMS,SAAUA,UC/C/FuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjE,SAAS6B,eAAe,SAM1ByB,K","file":"static/js/main.4af96590.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { a } from 'react-router-dom';\r\nimport React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    const purpleClick = () => {\r\n        props.darkmode('purple');\r\n        document.body.style.backgroundColor = 'purple';\r\n        props.showMessage(\"Purple DarkMode is activated\",\"success\");\r\n    }\r\n\r\n    const greenClick = () => {\r\n        props.darkmode('green');\r\n        document.body.style.backgroundColor = 'green';\r\n        props.showMessage(\"Green DarkMode is activated\",\"success\");\r\n    }\r\n\r\n    const blackClick = () => {\r\n        props.darkmode('black');\r\n        document.body.style.backgroundColor = 'black';\r\n        props.showMessage(\"Black DarkMode is activated\",\"success\");\r\n    }\r\n\r\n    const redClick = () => {\r\n        props.darkmode('red');\r\n        document.body.style.backgroundColor = 'red';\r\n        props.showMessage(\"Red DarkMode is activated\",\"success\");\r\n    }\r\n\r\n    const orangeClick = () => {\r\n        props.darkmode('orange');\r\n        document.body.style.backgroundColor = 'orange';\r\n        props.showMessage(\"Orange DarkMode is activated\",\"success\");\r\n    }\r\n    \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/\">AboutUs</a>\r\n                        </li> */}\r\n                        <li className=\"nav-item\"></li>\r\n                    </ul>\r\n                    {props.mode === 'dark'?\r\n                        <div style={{color:\"white\"}}>\r\n                            Other DarkModes :\r\n                            <img src=\"https://htmlcolorcodes.com/assets/images/colors/neon-orange-color-solid-background-1920x1080.png\" onClick={orangeClick} style={{height:\"20px\", width:\"20px\", border:\"1px solid white\"}} alt=\"Orange\" className=\"rounded-circle mx-2\" />\r\n                            <img src=\"https://images.unsplash.com/flagged/photo-1593005510509-d05b264f1c9c?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8cmVkJTIwY29sb3VyfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&w=1000&q=80\" onClick={redClick} style={{height:\"20px\", width:\"20px\", border:\"1px solid white\"}} alt=\"Red\" className=\"rounded-circle mx-2\" />\r\n                            <img src=\"https://artsyfartsylife.com/wp-content/uploads/2019/09/normal-purple-color-200x200.jpg\" onClick={purpleClick} style={{height:\"20px\", width:\"20px\", border:\"1px solid white\"}} alt=\"Purple\" className=\"rounded-circle mx-2\" />\r\n                            <img src=\"https://www.colorcombos.com/images/colors/5BC236.png\" onClick={greenClick} style={{height:\"20px\", width:\"20px\", border:\"1px solid white\"}} alt=\"Green\" className=\"rounded-circle mx-2\" />\r\n                            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/50/Black_colour.jpg/1200px-Black_colour.jpg\" onClick={blackClick} style={{height:\"20px\", width:\"20px\", border:\"1px solid white\"}} alt=\"Black\" className=\"rounded-circle mx-2\" />\r\n                        </div>:\"\"\r\n                    }\r\n                    <div className={`form-check form-switch text-${props.mode} mx-2`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.func} id=\"flexSwitchCheckDefault\" />\r\n                        <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{color : props.mode==='light'?'black':'white'}}>Dark Mode</label>\r\n                        {/* <TextArea /> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>      \r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string.isRequired}\r\n\r\nNavbar.defaultProps = {title: 'TextEditor'}","import React, {useState} from \"react\"; \r\n\r\nexport default function TextArea(props) {\r\n    const [text, setText] = useState('');\r\n\r\n    const changeevent = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const clickevent = () => {\r\n        let t1 = text.toUpperCase();\r\n        setText(t1);\r\n        props.showMessage(\"Your Text is converted into upperCase\",\"success\");\r\n    }\r\n\r\n    const clickLoEvent = () => {\r\n        let t1 = text.toLowerCase();\r\n        setText(t1);\r\n        props.showMessage(\"Your Text is converted into lowerCase\",\"success\");\r\n    }\r\n\r\n    const clickcoEvent = () => {\r\n        var splitString = text.split(\"\");\r\n        var reverseArray = splitString.reverse();\r\n        var t1 = reverseArray.join(\"\");\r\n        setText(t1);\r\n        props.showMessage(\"Your Text is reversed\",\"success\");\r\n    }\r\n\r\n    const clickcopyEvent = () => {\r\n        let tex = document.getElementById(\"exampleFormControlTextarea1\");\r\n        tex.select();\r\n        navigator.clipboard.writeText(tex.value);\r\n        props.showMessage(\"Your Text is copy to clipboard\",\"success\");\r\n    }\r\n    \r\n    const clickrsEvent = () => {\r\n        let newtex = text.split(/[ ]+/);\r\n        setText(newtex.join(\" \"));\r\n        props.showMessage(\"Remove extra spaces from text\",\"success\");\r\n    }\r\n\r\n    const clickclrEvent = () => {\r\n        let t1 = '';\r\n        setText(t1);\r\n        props.showMessage(\"Your Text is cleared\",\"success\");\r\n    }\r\n\r\n    const Color = () => {\r\n        let btnbg;\r\n        props.darkmode === 'black' ? \r\n            btnbg = 'white' :\r\n            props.darkmode === 'green' ? \r\n                btnbg = 'black' :\r\n                props.darkmode === 'purple' ? \r\n                     btnbg = 'green' :\r\n                     props.darkmode === 'red' ? \r\n                         btnbg = 'yellow' :\r\n                         props.darkmode === 'orange' ? \r\n                            btnbg = 'black' : btnbg = 'blue';\r\n\r\n                            return btnbg;\r\n    }\r\n\r\n    const btnColor = () => {\r\n        let btnbg;\r\n        props.darkmode === 'black' ? \r\n            btnbg = 'black' :\r\n            props.darkmode === 'green' ? \r\n                btnbg = 'green' :\r\n                props.darkmode === 'purple' ? \r\n                     btnbg = 'yellow' :\r\n                     props.darkmode === 'red' ? \r\n                         btnbg = 'red' :\r\n                         props.darkmode === 'orange' ? \r\n                            btnbg = 'orange' : btnbg = 'white';\r\n\r\n                            return btnbg;\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div style={{color : props.mode==='light'?'#042743':'white'}}>\r\n            <h1>{props.heading}</h1>               \r\n            \r\n            <div className=\"mb-3\">\r\n                <textarea style={{backgroundColor : props.mode==='light'?'white':props.darkmode == null ? 'grey':Color(), color : props.mode==='light'?props.darkmode:btnColor()}} className=\"form-control\" value = {text} onChange={changeevent} id=\"exampleFormControlTextarea1\" rows=\"10\"></textarea>\r\n            </div>\r\n            \r\n            <button type=\"button\" onClick={clickevent} style={{backgroundColor:Color(), color:btnColor(), border:`1px solid ${btnColor()}`}} className=\"btn btn-primary mx-1\">Convert To UpperCase</button>\r\n            <button type=\"button\" onClick={clickLoEvent} style={{backgroundColor:Color(), color:btnColor(), border:`1px solid ${btnColor()}`}} className=\"btn btn-primary mx-1\">Convert To LowerCase</button>\r\n            <button type=\"button\" onClick={clickcoEvent} style={{backgroundColor:Color(), color:btnColor(), border:`1px solid ${btnColor()}`}} className=\"btn btn-primary mx-1\">Convert To ReverseOrder</button>\r\n            <button type=\"button\" onClick={clickcopyEvent} style={{backgroundColor:Color(), color:btnColor(), border:`1px solid ${btnColor()}`}} className=\"btn btn-primary mx-1\">Copy Text</button>\r\n            <button type=\"button\" onClick={clickrsEvent} style={{backgroundColor:Color(), color:btnColor(), border:`1px solid ${btnColor()}`}} className=\"btn btn-primary mx-1\">Remove Spaces</button>\r\n            <button type=\"button\" onClick={clickclrEvent} style={{backgroundColor:Color(), color:btnColor(), border:`1px solid ${btnColor()}`}} className=\"btn btn-primary mx-1\">Clear Text</button>\r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{color : props.mode==='light'?'black':'white'}}>\r\n            <h2>Text Summary</h2>\r\n            <p>{text.length>0?text.endsWith(' ')?text.split(\" \").length-1:text.split(\" \").length:\"0\"} Words and {text.length} Characters</p>\r\n            <p>{text.length>0?text.endsWith(' ')?(text.split(\" \").length-1)*0.008:text.split(\" \").length*0.008:\"0\"} Minutes To Read</p>\r\n            <h2>Preview Of Text</h2>\r\n            <p>{text.length>0?text:\"Enter text to text area for see the preview of text\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './component/About';\nimport Navbar from './component/Navbar';\nimport TextArea from './component/TextArea';\nimport {useState} from 'react';\nimport Alert from './component/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [msg,setmsg] = useState(null);\n  const [darkmode,setdarkmode] = useState(null);\n\n  const showMessage = (mes,type) => {\n    setmsg({\n      msg: mes,\n      type:type\n    })\n\n    setTimeout(() => {\n      setmsg(null);\n    }, 1500);\n  }\n\n  const togglechange = () => {\n    if(mode === 'light'){\n      setmode('dark');\n      setdarkmode(null);\n      document.body.style.backgroundColor = '#042743';\n      showMessage(\"Dark mode is activated\",\"success\");\n    }\n    else{\n      setmode('light');\n      setdarkmode(null);\n      document.body.style.backgroundColor = 'white';\n      showMessage(\"Light mode is activated\",\"success\");\n    }\n  }\n\n  const showDarkMode = (dark) => {\n    setdarkmode(dark);\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n     <Navbar title=\"TextUtils\" mode={mode}  func={togglechange} darkmode={showDarkMode} showMessage={showMessage}/> \n     <Alert alert={msg}/>\n        <div className=\"container my-5\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <TextArea showMessage={showMessage} heading=\"Enter text below to analyse\" mode={mode} darkmode={darkmode} />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}